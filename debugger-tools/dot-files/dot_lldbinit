# .lldbinit file for debugging clasp
#
#

script print("Starting .lldbinit")

break set -n dbg_hook
break set -n core::lisp_error_simple
break set -n core::lisp_error


# set the arguments for running the executable
#
command regex set-args 's/(.+)/settings set target.run-args %1/'

#
# Print the lisp value of the smart-ptr argument
#
command regex lpr 's/(.+)/expr tprint((void*)%1.theObject)/'
command regex lpraw 's/(.+)/expr tprint((void*)%1)/'
command regex slpr 's/(.+)/expr dbg_safe_println((uintptr_t)%1.theObject)/'
command regex slpraw 's/(.+)/expr dbg_safe_println((uintptr_t)%1)/'
command regex lphead 's/(.+)/expr core::dbg_describe_tagged_T_Optr_header((core::T_O*)%1)/'
command regex lmv 's/(.+)/expr core::dbg_mv_lowLevelDescribe(%1)/'



# command alias ldbg expr af_invokeInternalDebuggerFromGdb()

command alias lreload command source ~/.lldbinit

# set breakpoints
break set -n dbg_hook

command alias lbt expr (void) c_btcl()

#
# When we continue invoke the debugger as if control-c was hit
command alias ldbg expr (void)dbg_controlC()

command alias llow-level-backtrace expr core::core_lowLevelBacktrace()
command alias lframe-next expr af_gotoIhsNext()
command alias lframe-prev expr af_gotoIhsPrev()
command alias lprint-frame expr af_printCurrentIhsFrame()
command alias lprint-frame-env expr af_printCurrentIhsFrameEnvironment()
command regex lgoto-frame 's/lgoto-frame ([0-9]+)/expr af_gotoIhsFrame(%1)/'


command alias loader command script import "debugger-tools/lldb_loader.py"

command alias signal-setup  process handle -p true -n false -s false SIGSEGV SIGUSR1 SIGXCPU SIGPWR

loader

