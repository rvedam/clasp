diff --git a/code/arena.c b/code/arena.c
index afff836..dab6f30 100644
--- a/code/arena.c
+++ b/code/arena.c
@@ -193,6 +193,7 @@ Res ArenaInit(Arena arena, ArenaClass class, Size grainSize, ArgList args)
 {
   Res res;
   Bool zoned = ARENA_DEFAULT_ZONED;
+  Bool incremental = ARENA_DEFAULT_INCREMENTAL;
   mps_arg_s arg;
 
   AVER(arena != NULL);
@@ -202,6 +203,9 @@ Res ArenaInit(Arena arena, ArenaClass class, Size grainSize, ArgList args)
   if (ArgPick(&arg, args, MPS_KEY_ARENA_ZONED))
     zoned = arg.val.b;
 
+  if (ArgPick(&arg, args, MPS_KEY_ARENA_INCREMENTAL))
+    incremental = arg.val.b;
+
   arena->class = class;
 
   arena->committed = (Size)0;
@@ -219,6 +223,7 @@ Res ArenaInit(Arena arena, ArenaClass class, Size grainSize, ArgList args)
   arena->hasFreeLand = FALSE;
   arena->freeZones = ZoneSetUNIV;
   arena->zoned = zoned;
+  arena->incremental = incremental;
 
   arena->primary = NULL;
   RingInit(&arena->chunkRing);
@@ -296,6 +301,7 @@ ARG_DEFINE_KEY(vmw3_top_down, Bool);
 ARG_DEFINE_KEY(arena_size, Size);
 ARG_DEFINE_KEY(arena_grain_size, Size);
 ARG_DEFINE_KEY(arena_zoned, Bool);
+ARG_DEFINE_KEY(arena_incremental, Bool);
 
 Res ArenaCreate(Arena *arenaReturn, ArenaClass class, ArgList args)
 {
diff --git a/code/config.h b/code/config.h
index c0441d1..f9ce6fb 100644
--- a/code/config.h
+++ b/code/config.h
@@ -408,6 +408,8 @@
 
 #define ARENA_DEFAULT_ZONED     TRUE
 
+#define ARENA_DEFAULT_INCREMENTAL     TRUE
+
 #define ArenaDefaultZONESET (ZoneSetUNIV << (MPS_WORD_WIDTH / 2))
 /* TODO: This is left over from before the branch/2014-01-29/mps-chain-zones
    and 2014-01-17/cbs-tract-alloc reformed allocation, and may now be doing
@@ -633,6 +635,20 @@
     { 36 * 1024, 0.45 }  /* second gen, after which dynamic */ \
   }
 
+/* Experimental Scan Barrier threshold
+ *
+ */
+/* Number of bits needed to keep the seg scan count */
+#define SEG_SCANS_BITS 10
+/* The number of unecessary scans performed, before raising the write
+ * barrier to remember the refset summary. */
+#define SEG_SCANS_INIT 3
+/* The number of unecessary scans performed, before raising the write
+ * barrier to remember the refset summary, after a necessary scan */
+#define SEG_SCANS_AFTER_NEEDED_SCAN 3
+/* The number of unecessary scans performed, before raising the write
+ * barrier to remember the refset summary, after a barrier hit */
+#define SEG_SCANS_AFTER_HIT 1
 
 #endif /* config_h */
 
diff --git a/code/gcbench.c b/code/gcbench.c
index 0dc3ef3..3bc1a7e 100644
--- a/code/gcbench.c
+++ b/code/gcbench.c
@@ -50,6 +50,7 @@ static size_t arena_size = 256ul * 1024 * 1024; /* arena size */
 static size_t arena_grain_size = 1; /* arena grain size */
 static unsigned pinleaf = FALSE;  /* are leaf objects pinned at start */
 static mps_bool_t zoned = TRUE;   /* arena allocates using zones */
+static mps_bool_t incremental = TRUE; /* arena allocates using zones */
 
 typedef struct gcthread_s *gcthread_t;
 
@@ -231,6 +232,7 @@ static void arena_setup(gcthread_fn_t fn,
     MPS_ARGS_ADD(args, MPS_KEY_ARENA_SIZE, arena_size);
     MPS_ARGS_ADD(args, MPS_KEY_ARENA_GRAIN_SIZE, arena_grain_size);
     MPS_ARGS_ADD(args, MPS_KEY_ARENA_ZONED, zoned);
+    MPS_ARGS_ADD(args, MPS_KEY_ARENA_INCREMENTAL, incremental);
     RESMUST(mps_arena_create_k(&arena, mps_arena_class_vm(), args));
   } MPS_ARGS_END(args);
   RESMUST(dylan_fmt(&format, arena));
@@ -274,6 +276,7 @@ static struct option longopts[] = {
   {"pin-leaf",         no_argument,       NULL, 'l'},
   {"seed",             required_argument, NULL, 'x'},
   {"arena-unzoned",    no_argument,       NULL, 'z'},
+  {"non-incremental",  no_argument,       NULL, 'I'},
   {NULL,               0,                 NULL, 0  }
 };
 
@@ -303,7 +306,7 @@ int main(int argc, char *argv[]) {
   }
   putchar('\n');
   
-  while ((ch = getopt_long(argc, argv, "ht:i:p:g:m:a:w:d:r:u:lx:z", longopts, NULL)) != -1)
+  while ((ch = getopt_long(argc, argv, "ht:i:p:g:m:a:w:d:r:u:lx:zI", longopts, NULL)) != -1)
     switch (ch) {
     case 't':
       nthreads = (unsigned)strtoul(optarg, NULL, 10);
@@ -392,6 +395,9 @@ int main(int argc, char *argv[]) {
     case 'z':
       zoned = FALSE;
       break;
+    case 'I':
+      incremental = FALSE;
+      break;
     default:
       /* This is printed in parts to keep within the 509 character
          limit for string literals in portable standard C. */
@@ -437,6 +443,8 @@ int main(int argc, char *argv[]) {
       fprintf(stderr,
               "  -z, --arena-unzoned\n"
               "    Disable zoned allocation in the arena\n"
+              "  -I, --non-incremental\n"
+              "    Disable incremental collection\n"
               "Tests:\n"
               "  amc   pool class AMC\n"
               "  ams   pool class AMS\n");
diff --git a/code/mpmst.h b/code/mpmst.h
index 50945d5..39625a4 100644
--- a/code/mpmst.h
+++ b/code/mpmst.h
@@ -285,6 +285,7 @@ typedef struct SegStruct {      /* segment structure */
   TraceSet white : TraceLIMIT;  /* traces for which seg is white */
   TraceSet nailed : TraceLIMIT; /* traces for which seg has nailed objects */
   RankSet rankSet : RankLIMIT;  /* ranks of references in this seg */
+  unsigned scans : SEG_SCANS_BITS; /* use write barrier after this many scans */
 } SegStruct;
 
 
@@ -741,6 +742,7 @@ typedef struct mps_arena_s {
   CBSStruct freeLandStruct;
   ZoneSet freeZones;            /* zones not yet allocated */
   Bool zoned;                   /* use zoned allocation? */
+  Bool incremental;             /* perform gc incrementally */
 
   /* locus fields (<code/locus.c>) */
   GenDescStruct topGen;         /* generation descriptor for dynamic gen */
diff --git a/code/mps.h b/code/mps.h
index 758c1b3..fc1fb0f 100644
--- a/code/mps.h
+++ b/code/mps.h
@@ -163,6 +163,9 @@ extern const struct mps_key_s _mps_key_arena_grain_size;
 extern const struct mps_key_s _mps_key_arena_zoned;
 #define MPS_KEY_ARENA_ZONED     (&_mps_key_arena_zoned)
 #define MPS_KEY_ARENA_ZONED_FIELD b
+extern const struct mps_key_s _mps_key_arena_incremental;
+#define MPS_KEY_ARENA_INCREMENTAL     (&_mps_key_arena_incremental)
+#define MPS_KEY_ARENA_INCREMENTAL_FIELD b
 extern const struct mps_key_s _mps_key_format;
 #define MPS_KEY_FORMAT          (&_mps_key_format)
 #define MPS_KEY_FORMAT_FIELD    format
diff --git a/code/seg.c b/code/seg.c
index 212b1f2..99e3c48 100644
--- a/code/seg.c
+++ b/code/seg.c
@@ -160,6 +160,7 @@ static Res SegInit(Seg seg, Pool pool, Addr base, Size size,
   seg->grey = TraceSetEMPTY;
   seg->pm = AccessSetEMPTY;
   seg->sm = AccessSetEMPTY;
+  seg->scans = SEG_SCANS_INIT;
   seg->depth = 0;
   seg->firstTract = NULL;
 
@@ -1207,17 +1208,18 @@ static void gcSegSetGrey(Seg seg, TraceSet grey)
   arena = PoolArena(SegPool(seg));
   oldGrey = seg->grey;
   gcSegSetGreyInternal(seg, oldGrey, grey); /* do the work */
-
   /* The read barrier is raised when the segment is grey for */
   /* some _flipped_ trace, i.e., is grey for a trace for which */
   /* the mutator is black. */
-  flippedTraces = arena->flippedTraces;
-  if (TraceSetInter(oldGrey, flippedTraces) == TraceSetEMPTY) {
-    if (TraceSetInter(grey, flippedTraces) != TraceSetEMPTY)
-      ShieldRaise(arena, seg, AccessREAD);
-  } else {
-    if (TraceSetInter(grey, flippedTraces) == TraceSetEMPTY)
-      ShieldLower(arena, seg, AccessREAD);
+  if (arena->incremental) {
+    flippedTraces = arena->flippedTraces;
+    if (TraceSetInter(oldGrey, flippedTraces) == TraceSetEMPTY) {
+      if (TraceSetInter(grey, flippedTraces) != TraceSetEMPTY)
+        ShieldRaise(arena, seg, AccessREAD);
+    } else {
+      if (TraceSetInter(grey, flippedTraces) == TraceSetEMPTY)
+        ShieldLower(arena, seg, AccessREAD);
+    }
   }
 
   EVENT3(SegSetGrey, arena, seg, grey);
diff --git a/code/trace.c b/code/trace.c
index 163d8b6..2856d33 100644
--- a/code/trace.c
+++ b/code/trace.c
@@ -607,13 +607,14 @@ static Res traceFlip(Trace trace)
   /* grey objects so that it can't obtain white pointers.  This is */
   /* achieved by read protecting all segments containing objects */
   /* which are grey for any of the flipped traces. */
-  for(rank = 0; rank < RankLIMIT; ++rank)
-    RING_FOR(node, ArenaGreyRing(arena, rank), nextNode) {
-      Seg seg = SegOfGreyRing(node);
-      if(TraceSetInter(SegGrey(seg), arena->flippedTraces) == TraceSetEMPTY
-          && TraceSetIsMember(SegGrey(seg), trace))
-        ShieldRaise(arena, seg, AccessREAD);
-    }
+  if (arena->incremental)
+    for (rank = 0; rank < RankLIMIT; ++rank)
+      RING_FOR(node, ArenaGreyRing(arena, rank), nextNode) {
+        Seg seg = SegOfGreyRing(node);
+        if(TraceSetInter(SegGrey(seg), arena->flippedTraces) == TraceSetEMPTY
+            && TraceSetIsMember(SegGrey(seg), trace))
+          ShieldRaise(arena, seg, AccessREAD);
+      }
 
   /* @@@@ When write barrier collection is implemented, this is where */
   /* write protection should be removed for all segments which are */
@@ -1134,15 +1135,27 @@ static Res traceScanSegRes(TraceSet ts, Rank rank, Arena arena, Seg seg)
      * scan, consistent with the recorded SegSummary?
      */
     AVER(RefSetSub(ScanStateUnfixedSummary(ss), SegSummary(seg)));
-
-    if(res != ResOK || !wasTotal) {
-      /* scan was partial, so... */
-      /* scanned summary should be ORed into segment summary. */
-      SegSetSummary(seg, RefSetUnion(SegSummary(seg), ScanStateSummary(ss)));
+    if (ZoneSetInter(ScanStateUnfixedSummary(ss), white) == ZoneSetEMPTY) {
+      /* a scan was not necessary */
+      if (seg->scans > 0)
+        seg->scans--;
     } else {
-      /* all objects on segment have been scanned, so... */
-      /* scanned summary should replace the segment summary. */
-      SegSetSummary(seg, ScanStateSummary(ss));
+      if (seg->scans < SEG_SCANS_AFTER_NEEDED_SCAN)
+        seg->scans = SEG_SCANS_AFTER_NEEDED_SCAN;
+    }
+    
+    if (seg->scans == 0) {
+      if(res != ResOK || !wasTotal) {
+        /* scan was partial, so... */
+        /* scanned summary should be ORed into segment summary. */
+        SegSetSummary(seg, RefSetUnion(SegSummary(seg), ScanStateSummary(ss)));
+      } else {
+        /* all objects on segment have been scanned, so... */
+        /* scanned summary should replace the segment summary. */
+        SegSetSummary(seg, ScanStateSummary(ss));
+      }
+    } else {
+      SegSetSummary(seg, RefSetUNIV);
     }
 
     ScanStateFinish(ss);
@@ -1201,6 +1214,9 @@ void TraceSegAccess(Arena arena, Seg seg, AccessSet mode)
 
   EVENT3(TraceAccess, arena, seg, mode);
 
+  if ((mode & SegSM(seg) & AccessWRITE) != 0)     /* write barrier? */
+    seg->scans = SEG_SCANS_AFTER_HIT;
+
   if((mode & SegSM(seg) & AccessREAD) != 0) {   /* read barrier? */
     Trace trace;
     TraceId ti;
@@ -1888,7 +1904,9 @@ Size TracePoll(Globals globals)
     trace = ArenaTrace(arena, (TraceId)0);
     AVER(arena->busyTraces == TraceSetSingle(trace));
     oldScanned = traceWorkClock(trace);
-    TraceQuantum(trace);
+    do {
+      TraceQuantum(trace);
+    } while(!arena->incremental && trace->state != TraceFINISHED);
     scannedSize = traceWorkClock(trace) - oldScanned;
     if(trace->state == TraceFINISHED) {
       TraceDestroy(trace);
