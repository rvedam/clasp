$var NumArgs = 4
$var InnerCount = NumArgs+1
$var Templates = InnerCount*2-1
$range template_ 0..Templates
$for template_ [[
        $var primaryTemplate = template_==0
        $var numVoids = template_ % InnerCount
        $var retVoid = template_ // InnerCount
        $var numArgs = NumArgs - numVoids
        $range Args_ 1..numArgs
        // numVoids = $numVoids    retVoid = $retVoid    primaryTemplate = $primaryTemplate
        $if primaryTemplate [[
                /* primaryTemplate = $(primaryTemplate) */
                template <typename Pols $if retVoid [[]] $else [[, typename RT]], $for Args_ ,[[typename ARG$Args_=void]] > 
                ]] $else [[
                /* Specialization primaryTemplate = $primaryTemplate */
                template <typename Pols $if retVoid [[]] $else [[, typename RT ]] $if numArgs [[,]] $for Args_ ,[[typename ARG$Args_]] >
                ]]
        class VariadicFunctoid
        $if primaryTemplate [[]] $else [[< Pols $if retVoid [[,void]] $else [[,RT ]] $if numArgs [[,]] $for Args_ , [[ARG$Args_]] >]]
        : public Functoid {
        public:
        typedef std::function<$if retVoid [[void]] $else [[RT]] ($for Args_ , [[ARG$Args_]])> Type;
        Type fptr;
        public:
        enum { NumParams = $numArgs };
        VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};
        DISABLE_NEW();
        core::T_mv activate( ActivationFrame_sp closedOverFrame, int numArgs, ArgArray args )
        {
            int countPureOutValues = CountPureOutValues<Pols>::value;
            if ( numArgs != (NumParams-countPureOutValues) )
            {
                core::wrongNumberOfArguments(numArgs,NumParams-countPureOutValues);
            }
            $if numArgs [[
                    int idx = 0;
                    ]]
                $for Args_ [[
                    translate::from_object<ARG$Args_> a$Args_;
                    InitializeWhenIncIdx(args,idx,typename Contains_<Pols,pureOutValue_<$Args_> >::type(),a$Args_);
                    ]]
                $if retVoid [[]] $else [[ RT retval = ]] fptr($for Args_ ,[[a$Args_._v]]);
            $if numArgs>0 [[
            core::MultipleValues& returnValues = core::lisp_multipleValues();
            returnValues.setSize(0);
            ]]
            $if retVoid [[
                    $if numArgs==0 [[]] $else [[ int oidx = 0; ]]
                    ]] $else [[
                    int oidx = 1;
                    ]]
                $for Args_ [[
                    ReturnValueWhen(returnValues,oidx,
                                    typename or_<typename Contains_<Pols,pureOutValue_<$Args_> >::type,
                                                 typename Contains_<Pols,    outValue_<$Args_> >::type >::type(),a$Args_._v);
                    ]]
                $if retVoid [[
                    $if numArgs==0 [[
                            return Values0<core::T_O>();
                            ]] $else [[
                            return gctools::multiple_values<T_O>(returnValues.valueGet(0,oidx),oidx);
                            ]]
                    ]] $else [[
                    return gctools::multiple_values<T_O>(translate::to_object<RT>::convert(retval),oidx);
                    ]]
          
                }

        };
        ]]

