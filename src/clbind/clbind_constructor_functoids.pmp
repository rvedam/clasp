$var NumArgs = 8
    $var RetSV = 0
    $var InnerCount = NumArgs+1
    $range ret 0..0
    $range template_ 0..(InnerCount-1)
    $for ret [[
        $for template_ [[
                $var numVoids = template_
                $var numArgs = NumArgs - template_
                $range Args_ 0..(numArgs-1)
                // ret = $ret
                // template_ = $template_
                // numVoids = $numVoids
                // numArgs = $numArgs
                /* Specialization */
                template <typename Pols, typename Pointer, typename T $if numArgs [[,]] $for Args_ ,[[typename ARG$Args_]] >
                class VariadicConstructorFunctoid
                 < Pols, Pointer, T, constructor<$for Args_ , [[ARG$Args_]]> >
                : public core::BuiltinClosure {
                public:
                        typedef core::BuiltinClosure TemplatedBase;
                public:
                    typedef Wrapper<T,Pointer>  WrapperType;
                public:
		    virtual const char* describe() const { return "VariadicConstructorFunctoid"; };
                    enum { NumParams = $numArgs };
                    VariadicConstructorFunctoid(core::T_sp name) : core::BuiltinClosure(name) {};
                    DISABLE_NEW();
                    virtual size_t templatedSizeof() const { return sizeof(*this);};
                    inline LCC_RETURN LISP_CALLING_CONVENTION()
                    {
                        INVOCATION_HISTORY_FRAME();
                        $if numArgs>0 [[
                          STACK_FRAME(buff,frame,$numArgs);
                          core::StackFrameDynamicScopeManager scope(frame);
                          lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
                        ]]
                      $for Args_ [[
                        translate::from_object<ARG$Args_,typename DoesNotContain_<Pols,pureOutValue<$(1+Args_)> >::type > a$Args_(frame.arg($Args_));
                      ]]
                      T* naked_ptr(new T($for Args_ ,[[a$Args_._v]]));
                      gctools::smart_ptr<WrapperType> retval = WrapperType::create(naked_ptr,reg::registered_class<T>::id);
                      $if numArgs>0 [[
                        core::MultipleValues& returnValues = core::lisp_multipleValues();
                        returnValues.setSize(0);
                      ]]
                      int oidx = 1;
                      $for Args_ [[
                        ReturnValueWhen(returnValues,oidx
                                        , typename is_outValue<Pols,$Args_>::type()
                                        , typename AdoptPointer<Pols,$Args_>::type()
                                        , a$Args_._v);
                      ]]
                      return LCC_RETURN(retval.raw_(),oidx);
                    }
                };
                ]]
        ]]

