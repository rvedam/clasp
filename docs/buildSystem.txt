Define TARGET clasp/build/clasp
APPRES-LISP



----------------------------------------------------------------------
----------------------------------------------------------------------
Source directories

src/gctools/
src/core/
src/clbind/
src/llvmo/
src/cffi/
src/asttooling/
src/serveEvent/
src/sockets/
src/mpip/



----------------------------------------------------------------------
----------------------------------------------------------------------
Google pump

Google pump.py is a python program that converts .pmp files into header files.
".pmp" files contain a description of C++ template code that gets expanded into lots of repetative C++ template code.
Every .pmp file needs to have google pump run on it.

These are the current .pmp files:

./clbind/clbind_constructor_functoids.pmp
./clbind/clbind_functoids.pmp
./clbind/clbind_methoids.pmp
./clbind/clbind_static_members.pmp
./clbind/constructors.pmp
./core/applyToActivationFrame.pmp
./core/clbind_templates.pmp
./core/external_wrappers_indirect_methoids.pmp
./core/wrappers_functoids.pmp
./core/wrappers_methoids.pmp

They generate header files with the same name suffixed with ".h".

Currently the pump output header files are written into build directories generated by boost build, any other build system would have to figure out where to put them and how to set up compiler flags so that when .cc files that #include them get built - they can get access to them.

This process doesn't depend on anything, only if one of these .pmp files changes does pump need to be run on the file.
The pump.py code is in clasp/src/common/pump.py


----------------------------------------------------------------------
----------------------------------------------------------------------
Symbol scraping

In each source directory is a file called: "symbols_scraped_inc.h"
- it lists the names and packages of Common Lisp SYMBOLs that are accessible to C++ as symbols with the names prefixed with "_sym_" ie: "_sym_list".

Before any files are built and at the beginning of every build the following script is run:
python src/common/symbolScraper.py *.cc include/*.h

The include/*.h is a symbolic link to a clasp/include/clasp/xxx directory that contains header files for each source directory.

The script extracts macros named the following from all of these files:
SYMBOL_EXPORT_SC_(pkg,name)     // exported symbol in pkg
SYMBOL_SC_(pkg,name)            // internal symbol in pkg
LISP_CLASS(...)
...others...

It builds a symbol table and compares it to the contents of symbols_scraped_inc.h,
if there are any differences (symbols added, removed or changed) then it generates a new symbols_scraped_inc.h file.

The symbols_scraped_inc.h file is included by almost every .cc file so that they have access to Common Lisp symbols without having to mess around with strings.

To summarize:
1) Symbol scraping scrapes all of the .cc files and may or may not generate a new symbols_scraped_inc.h file
2) .cc files #include the symbols_scraped_inc.h file

There is one very annoying bug that a user encounters when building Clasp.  The very first time a fresh repo is built with "make", a lot of errors will be reported.  If the user halts the make with Control-C and then types "make" again - the problem disappears, never to return.  We tracked down the problem to a problem with boost build (https://github.com/drmeister/clasp/issues/17) but it is not clear how to resolve it.
When you add new symbols it forces lots of recompilation because almost every .cc file #include's symbols_scraped_inc.h either directly or indirectly.


----------------------------------------------------------------------
----------------------------------------------------------------------
Register classes


/usr/bin/python /Users/meister/Development/clasp/src/common/registerClasses.py ../../src/core/bin/boehm/clang-darwin-4.2.1/release/link-static/core_initClasses_inc.h ../../src/core/bin/boehm/clang-darwin-4.2.1/release/link-static/${bname}_initScripting_inc.h include/*Package.h include/*.h ../../src/core/bin/boehm/clang-darwin-4.2.1/release/link-static/*.h *.cc ../../src/core/bin/boehm/clang-darwin-4.2.1/release/link-static/*.cc > registerClasses.log

Searches through all header files looking for macros like:
LISP_CLASS(...)

It populates the file XXX_initClasses_inc.h with code that exposes these C++ classes to Common Lisp


----------------------------------------------------------------------
----------------------------------------------------------------------





See src/lisp/Jamfile.jam
Copy src/lisp source tree (*.l *.lsp *.lisp *.sh) to $(APPRES-LISP)

src/core/bin/boehm/clang-darwin-4.2.1/release/link-static/core_scrape_flag.h
src/cffi/bin/boehm/clang-darwin-4.2.1/release/link-static/cffi_scrape_flag.h

Build .cc files in main

scraped ../../src/gctools/bin/boehm/clang-darwin-4.2.1/release/link-static/gctools_scrape_flag.h
	touch ../../src/gctools/bin/boehm/clang-darwin-4.2.1/release/link-static/gctools_scrape_flag.h
scraped ../../src/sockets/bin/boehm/clang-darwin-4.2.1/release/link-static/sockets_scrape_flag.h
	touch ../../src/sockets/bin/boehm/clang-darwin-4.2.1/release/link-static/sockets_scrape_flag.h
scraped ../../src/serveEvent/bin/boehm/clang-darwin-4.2.1/release/link-static/serveEvent_scrape_flag.h
	touch ../../src/serveEvent/bin/boehm/clang-darwin-4.2.1/release/link-static/serveEvent_scrape_flag.h
scraped ../../src/clbind/bin/boehm/clang-darwin-4.2.1/release/link-static/clbind_scrape_flag.h
	touch ../../src/clbind/bin/boehm/clang-darwin-4.2.1/release/link-static/clbind_scrape_flag.h

