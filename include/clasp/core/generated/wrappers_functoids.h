// This file was GENERATED by command:
//     pump.py wrappers_functoids.pmp
// DO NOT EDIT BY HAND!!!


// ret = 0  RetSV
// numArgs = 18
// numVoids = 0
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15,typename ARG16,typename ARG17 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16, ARG17) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16,
    ARG17);
Type fptr;
public:
enum { NumParams = 18 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,18);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
translate::from_object<ARG17> a17(core::T_sp((gc::Tagged)fargs[17]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v,a16._v,
    a17._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 17
// numVoids = 1
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15,typename ARG16 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16);
Type fptr;
public:
enum { NumParams = 17 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,17);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v,a16._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 16
// numVoids = 2
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15);
Type fptr;
public:
enum { NumParams = 16 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,16);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 15
// numVoids = 3
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14);
Type fptr;
public:
enum { NumParams = 15 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,15);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 14
// numVoids = 4
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13);
Type fptr;
public:
enum { NumParams = 14 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,14);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 13
// numVoids = 5
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
enum { NumParams = 13 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,13);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 12
// numVoids = 6
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
enum { NumParams = 12 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,12);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 11
// numVoids = 7
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
enum { NumParams = 11 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,11);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 10
// numVoids = 8
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
enum { NumParams = 10 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,10);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 9
// numVoids = 9
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
enum { NumParams = 9 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,9);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 8
// numVoids = 10
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
enum { NumParams = 8 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,8);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 7
// numVoids = 11
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
enum { NumParams = 7 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,7);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 6
// numVoids = 12
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
enum { NumParams = 6 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,6);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 5
// numVoids = 13
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3, ARG4) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
enum { NumParams = 5 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,5);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 4
// numVoids = 14
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2, ARG3) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
enum { NumParams = 4 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,4);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
RT retval =  fptr(a0._v,a1._v,a2._v,a3._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 3
// numVoids = 15
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctoid
<RT (ARG0, ARG1, ARG2) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1, ARG2);
Type fptr;
public:
enum { NumParams = 3 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,3);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
RT retval =  fptr(a0._v,a1._v,a2._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 2
// numVoids = 16
/* Specialization */
template <typename RT , typename ARG0,typename ARG1 >
class VariadicFunctoid
<RT (ARG0, ARG1) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0, ARG1);
Type fptr;
public:
enum { NumParams = 2 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,2);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
RT retval =  fptr(a0._v,a1._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 1
// numVoids = 17
/* Specialization */
template <typename RT , typename ARG0 >
class VariadicFunctoid
<RT (ARG0) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) (ARG0);
Type fptr;
public:
enum { NumParams = 1 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,1);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
RT retval =  fptr(a0._v);
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 0  RetSV
// numArgs = 0
// numVoids = 18
/* Specialization */
template <typename RT   >
class VariadicFunctoid
<RT () >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef RT(*Type) ();
Type fptr;
public:
enum { NumParams = 0 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
RT retval =  fptr();
return Values(translate::to_object<RT>::convert(retval));
}

};
// ret = 1  RetVoid
// numArgs = 18
// numVoids = 0
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,typename ARG15,
    typename ARG16,typename ARG17 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16, ARG17) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16,
    ARG17);
Type fptr;
public:
enum { NumParams = 18 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,18);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
translate::from_object<ARG17> a17(core::T_sp((gc::Tagged)fargs[17]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v,a16._v,a17._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 17
// numVoids = 1
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,typename ARG15,
    typename ARG16 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15, ARG16);
Type fptr;
public:
enum { NumParams = 17 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,17);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v,a16._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 16
// numVoids = 2
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,typename ARG15 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15);
Type fptr;
public:
enum { NumParams = 16 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,16);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 15
// numVoids = 3
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14);
Type fptr;
public:
enum { NumParams = 15 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,15);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 14
// numVoids = 4
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13);
Type fptr;
public:
enum { NumParams = 14 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,14);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 13
// numVoids = 5
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
enum { NumParams = 13 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,13);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 12
// numVoids = 6
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
enum { NumParams = 12 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,12);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 11
// numVoids = 7
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
enum { NumParams = 11 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,11);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 10
// numVoids = 8
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8,typename ARG9 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
enum { NumParams = 10 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,10);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 9
// numVoids = 9
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7,
    typename ARG8 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
enum { NumParams = 9 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,9);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 8
// numVoids = 10
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,typename ARG7 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
enum { NumParams = 8 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,8);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 7
// numVoids = 11
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
enum { NumParams = 7 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,7);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 6
// numVoids = 12
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
enum { NumParams = 6 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,6);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 5
// numVoids = 13
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3, ARG4) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
enum { NumParams = 5 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,5);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 4
// numVoids = 14
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2, ARG3) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
enum { NumParams = 4 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,4);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
fptr(a0._v,a1._v,a2._v,a3._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 3
// numVoids = 15
/* Specialization */
template < typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctoid
<void(ARG0, ARG1, ARG2) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1, ARG2);
Type fptr;
public:
enum { NumParams = 3 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,3);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
fptr(a0._v,a1._v,a2._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 2
// numVoids = 16
/* Specialization */
template < typename ARG0,typename ARG1 >
class VariadicFunctoid
<void(ARG0, ARG1) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0, ARG1);
Type fptr;
public:
enum { NumParams = 2 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,2);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
fptr(a0._v,a1._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 1
// numVoids = 17
/* Specialization */
template < typename ARG0 >
class VariadicFunctoid
<void(ARG0) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) (ARG0);
Type fptr;
public:
enum { NumParams = 1 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,1);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
fptr(a0._v);
return Values0<core::T_O>();
}

};
// ret = 1  RetVoid
// numArgs = 0
// numVoids = 18
/* Specialization */
template <  >
class VariadicFunctoid
<void() >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef void(*Type) ();
Type fptr;
public:
enum { NumParams = 0 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
fptr();
return Values0<core::T_O>();
}

};
// ret = 2  RetMV
// numArgs = 18
// numVoids = 0
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15,typename ARG16,typename ARG17 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15,
    ARG16, ARG17) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12,
    ARG13, ARG14, ARG15, ARG16, ARG17);
Type fptr;
public:
enum { NumParams = 18 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,18);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
translate::from_object<ARG17> a17(core::T_sp((gc::Tagged)fargs[17]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v,a15._v,a16._v,a17._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 17
// numVoids = 1
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15,typename ARG16 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15,
    ARG16) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12,
    ARG13, ARG14, ARG15, ARG16);
Type fptr;
public:
enum { NumParams = 17 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,17);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
translate::from_object<ARG16> a16(core::T_sp((gc::Tagged)fargs[16]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v,a15._v,a16._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 16
// numVoids = 2
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
    ARG15) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12,
    ARG13, ARG14, ARG15);
Type fptr;
public:
enum { NumParams = 16 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,16);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
translate::from_object<ARG15> a15(core::T_sp((gc::Tagged)fargs[15]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v,a15._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 15
// numVoids = 3
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12,
    ARG13, ARG14);
Type fptr;
public:
enum { NumParams = 15 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,15);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
translate::from_object<ARG14> a14(core::T_sp((gc::Tagged)fargs[14]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 14
// numVoids = 4
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12,
    ARG13);
Type fptr;
public:
enum { NumParams = 14 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,14);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
translate::from_object<ARG13> a13(core::T_sp((gc::Tagged)fargs[13]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 13
// numVoids = 5
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
enum { NumParams = 13 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,13);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
translate::from_object<ARG12> a12(core::T_sp((gc::Tagged)fargs[12]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 12
// numVoids = 6
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
enum { NumParams = 12 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,12);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
translate::from_object<ARG11> a11(core::T_sp((gc::Tagged)fargs[11]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 11
// numVoids = 7
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
enum { NumParams = 11 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,11);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
translate::from_object<ARG10> a10(core::T_sp((gc::Tagged)fargs[10]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 10
// numVoids = 8
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
enum { NumParams = 10 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,10);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
translate::from_object<ARG9> a9(core::T_sp((gc::Tagged)fargs[9]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 9
// numVoids = 9
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
enum { NumParams = 9 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,9);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
translate::from_object<ARG8> a8(core::T_sp((gc::Tagged)fargs[8]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 8
// numVoids = 10
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
enum { NumParams = 8 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,8);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
translate::from_object<ARG7> a7(core::T_sp((gc::Tagged)fargs[7]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 7
// numVoids = 11
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
enum { NumParams = 7 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,7);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
translate::from_object<ARG6> a6(core::T_sp((gc::Tagged)fargs[6]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 6
// numVoids = 12
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
enum { NumParams = 6 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,6);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
translate::from_object<ARG5> a5(core::T_sp((gc::Tagged)fargs[5]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 5
// numVoids = 13
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3, ARG4) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
enum { NumParams = 5 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,5);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
translate::from_object<ARG4> a4(core::T_sp((gc::Tagged)fargs[4]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 4
// numVoids = 14
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2, ARG3) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
enum { NumParams = 4 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,4);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
translate::from_object<ARG3> a3(core::T_sp((gc::Tagged)fargs[3]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v,a3._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 3
// numVoids = 15
/* Specialization */
template <typename RT , typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1, ARG2) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1, ARG2);
Type fptr;
public:
enum { NumParams = 3 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,3);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
translate::from_object<ARG2> a2(core::T_sp((gc::Tagged)fargs[2]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v,a2._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 2
// numVoids = 16
/* Specialization */
template <typename RT , typename ARG0,typename ARG1 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0, ARG1) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0, ARG1);
Type fptr;
public:
enum { NumParams = 2 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,2);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
translate::from_object<ARG1> a1(core::T_sp((gc::Tagged)fargs[1]));
gctools::multiple_values<RT> retval =  fptr(a0._v,a1._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 1
// numVoids = 17
/* Specialization */
template <typename RT , typename ARG0 >
class VariadicFunctoid
<gctools::multiple_values<RT>(ARG0) >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) (ARG0);
Type fptr;
public:
enum { NumParams = 1 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
STACK_FRAME(buff,fargs,1);
core::StackFrameDynamicScopeManager scope(fargs);
lambdaListHandler_createBindings(gctools::tagged_pointer<core::Closure>(this),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
translate::from_object<ARG0> a0(core::T_sp((gc::Tagged)fargs[0]));
gctools::multiple_values<RT> retval =  fptr(a0._v);
return retval.as_return_type();
}

};
// ret = 2  RetMV
// numArgs = 0
// numVoids = 18
/* Specialization */
template <typename RT   >
class VariadicFunctoid
<gctools::multiple_values<RT>() >
: public BuiltinClosure {
public:
typedef BuiltinClosure TemplatedBase;
public:
virtual const char* describe() const {return "VariadicFunctoid";};

typedef gctools::multiple_values<RT>(*Type) ();
Type fptr;
public:
enum { NumParams = 0 };
VariadicFunctoid(T_sp name, Symbol_sp funcType, Type ptr, SOURCE_INFO) : BuiltinClosure(name,funcType,SOURCE_INFO_PASS),
    fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this); };
virtual void* functionAddress() const { return (void*)this->fptr; };
inline LCC_RETURN LISP_CALLING_CONVENTION()
{
INVOCATION_HISTORY_FRAME();
gctools::multiple_values<RT> retval =  fptr();
return retval.as_return_type();
}

};



